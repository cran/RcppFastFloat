// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// as_dbl
Rcpp::DoubleVector as_dbl(const Rcpp::CharacterVector x);
RcppExport SEXP _RcppFastFloat_as_dbl(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(as_dbl(x));
    return rcpp_result_gen;
END_RCPP
}
// parseExample
double parseExample(const std::string& input, bool verbose);
RcppExport SEXP _RcppFastFloat_parseExample(SEXP inputSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(parseExample(input, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppFastFloat_as_dbl", (DL_FUNC) &_RcppFastFloat_as_dbl, 1},
    {"_RcppFastFloat_parseExample", (DL_FUNC) &_RcppFastFloat_parseExample, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppFastFloat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
